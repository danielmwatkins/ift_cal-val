# cycl template mytemplate.j2
[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..20
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = global_setup  => mkpaths<param_set> => pullfetchimage & pulljuliaimage => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>
        
[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = bering_strait-100km_by_100km-20040620-20040621,bering_strait-100km_by_100km-20040823-20040824,bering_strait-100km_by_100km-20050303-20050304,bering_strait-100km_by_100km-20050705-20050706,bering_strait-100km_by_100km-20050917-20050918,bering_strait-100km_by_100km-20070726-20070727,bering_strait-100km_by_100km-20080418-20080419,bering_strait-100km_by_100km-20090523-20090524,bering_strait-100km_by_100km-20090802-20090803,bering_strait-100km_by_100km-20110319-20110320,bering_strait-100km_by_100km-20120513-20120514,bering_strait-100km_by_100km-20120523-20120524,bering_strait-100km_by_100km-20120607-20120608,bering_strait-100km_by_100km-20120812-20120813,bering_strait-100km_by_100km-20130423-20130424,bering_strait-100km_by_100km-20150320-20150321,bering_strait-100km_by_100km-20160415-20160416,bering_strait-100km_by_100km-20160901-20160902,bering_strait-100km_by_100km-20180723-20180724,bering_strait-100km_by_100km-20200628-20200629,bering_strait-100km_by_100km-20220909-20220910
            startdate = 2004-06-20,2004-08-23,2005-03-03,2005-07-05,2005-09-17,2007-07-26,2008-04-18,2009-05-23,2009-08-02,2011-03-19,2012-05-13,2012-05-23,2012-06-07,2012-08-12,2013-04-23,2015-03-20,2016-04-15,2016-09-01,2018-07-23,2020-06-28,2022-09-09
            enddate = 2004-06-21,2004-08-24,2005-03-04,2005-07-06,2005-09-18,2007-07-27,2008-04-19,2009-05-24,2009-08-03,2011-03-20,2012-05-14,2012-05-24,2012-06-08,2012-08-13,2013-04-24,2015-03-21,2016-04-16,2016-09-02,2018-07-24,2020-06-29,2022-09-10
            crs = epsg3413 # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            
            bounding_box = -1887500.00027@1262499.99936@-1787500.00027@1162499.99936,-2212500.0003@1537499.99999@-2112500.0003@1437499.99999,-2712500.00111@2037499.99937@-2612500.00111@1937499.99937,-1737499.99902@1237500.00121@-1637499.99902@1137500.00121,-1987500.0016@1912499.99836@-1887500.0016@1812499.99836,-2587499.9999@1312500.00014@-2487499.9999@1212500.00014,-2912499.99931@2037499.99999@-2812499.99931@1937499.99999,-2562500.00191@1887499.99816@-2462500.00191@1787499.99816,-2212500.0003@1537499.99999@-2112500.0003@1437499.99999,-2312500.00116@2112499.99855@-2212500.00116@2012499.99855,-2612499.99958@1787500.00112@-2512499.99958@1687500.00112,-2537500.00029@1687500.00011@-2437500.00029@1587500.00011,-2637500.00002@2012500.00033@-2537500.00002@1912500.00033,-1712500.0@1012499.99915@-1612500.0@912499.99915,-2837499.99889@2212500.0014@-2737499.99889@2112500.0014,-2362499.99961@1862500.00093@-2262499.99961@1762500.00093,-2862500.00124@1737499.9986@-2762500.00124@1637499.9986,-2012499.99854@1912500.00115@-1912499.99854@1812500.00115,-1687499.99973@1012499.99949@-1587499.99973@912499.99949,-1812499.99935@1037500.00115@-1712499.99935@937500.00115,-2512500.00021@1437500.0005@-2412500.00021@1337500.0005
            centroid_x = 69.87844541,66.10893483,60.00562854,71.11761232,65.55342987,64.26080087,58.60837597,61.82447916,66.10893483,62.27074228,61.96997611,62.9992035,60.65389165,72.40063848,58.23860958,63.34872592,60.37378491,65.39378895,72.59554737,71.50592842,64.3287477
            centroid_y = -168.4193808,-169.5225764,-171.740562,-170.1341931,-178.869309,-161.4520419,-169.7731423,-171.1796204,-169.5225764,-177.3523703,-169.1391854,-168.3565685,-172.1786479,-165.0685828,-172.8037646,-173.0887729,-165.9637565,-178.5024123,-165.4464272,-164.2611986,-164.3991622
            minfloearea = 300
            maxfloearea = 90000
            project_dir = "~/ice-floe-tracker-pipeline"

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            reflectance_dir = $fetchdata_dir/"reflectance"
            
    [[global_setup]]  
        script = """
            mkdir -p ~/.cylc
            mkdir -p ~/.cylc/flow
            cp $project_dir/config/cylc_hpc/global.cylc ~/.cylc/flow
        """

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """

    [[pullfetchimage]]
        # Pull the latest Docker image containing software for fetching images from NASA Worldview API and satellite times from space-track.org
        # Apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/fetchdata.simg docker://brownccv/icefloetracker-fetchdata:main
        """
        platform = oscar
        execution time limit = PT1H
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 2

    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch reflectance, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )

            apptainer exec --bind $fetchdata_dir/${location_array[$i]}:/tmp $project_dir/fetchdata.simg /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_x_array=( $(echo $centroid_x| sed -e 's/,/ /g') )
            centroid_y_array=( $(echo $centroid_y | sed -e 's/,/ /g') )

            apptainer exec --bind $results_dir/${location_array[$i]}/soit:/tmp $project_dir/fetchdata.simg python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_lat ${centroid_x_array[$i]} --centroid_lon ${centroid_y_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4
    
    [[pulljuliaimage]]
        # Pull the latest Docker image containing Julia IceFloeTracker software
        # apptainer will check the image layers and only re-download if necessary 
        script = """
            apptainer pull --force $project_dir/icefloetracker-julia.simg docker://brownccv/icefloetracker-julia:main
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 32G
            --cpus-per-task = 2

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/landmasks:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 4G
            --cpus-per-task = 8
    
    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/reflectance -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 12G
            --cpus-per-task = 20
    
    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $preprocess_dir:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
    
    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/"tracker":/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --passtimes $preprocess_dir --latlon $sample_img --output /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 20G
            --cpus-per-task = 1
    
    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $sample_img --resdir /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2