# cycl template mytemplate.j2
[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..20
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = global_setup  => mkpaths<param_set> => pullfetchimage & pulljuliaimage => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>

[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = hudson_bay-100km_by_100km-20030825-20030826,hudson_bay-100km_by_100km-20040706-20040707,hudson_bay-100km_by_100km-20040903-20040904,hudson_bay-100km_by_100km-20050409-20050410,hudson_bay-100km_by_100km-20050613-20050614,hudson_bay-100km_by_100km-20060329-20060330,hudson_bay-100km_by_100km-20060403-20060404,hudson_bay-100km_by_100km-20060918-20060919,hudson_bay-100km_by_100km-20070428-20070429,hudson_bay-100km_by_100km-20080813-20080814,hudson_bay-100km_by_100km-20090605-20090606,hudson_bay-100km_by_100km-20090615-20090616,hudson_bay-100km_by_100km-20110323-20110324,hudson_bay-100km_by_100km-20110327-20110328,hudson_bay-100km_by_100km-20130510-20130511,hudson_bay-100km_by_100km-20150720-20150721,hudson_bay-100km_by_100km-20170716-20170717,hudson_bay-100km_by_100km-20200509-20200510,hudson_bay-100km_by_100km-20210518-20210519,hudson_bay-100km_by_100km-20210915-20210916,hudson_bay-100km_by_100km-20220826-20220827
            startdate = 2003-08-25,2004-07-06,2004-09-03,2005-04-09,2005-06-13,2006-03-29,2006-04-03,2006-09-18,2007-04-28,2008-08-13,2009-06-05,2009-06-15,2011-03-23,2011-03-27,2013-05-10,2015-07-20,2017-07-16,2020-05-09,2021-05-18,2021-09-15,2022-08-26
            enddate = 2003-08-26,2004-07-07,2004-09-04,2005-04-10,2005-06-14,2006-03-30,2006-04-04,2006-09-19,2007-04-29,2008-08-14,2009-06-06,2009-06-16,2011-03-24,2011-03-28,2013-05-11,2015-07-21,2017-07-17,2020-05-10,2021-05-19,2021-09-16,2022-08-27
            crs = epsg3413 # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon
            bounding_box = -1887499.99991@-2037499.9997@-1787499.99991@-2137499.9997,-2087500.00006@-3087499.99986@-1987500.00006@-3187499.99986,-1912499.9998@-2062500.00001@-1812499.9998@-2162500.00001,-2662500.00018@-2387500.00035@-2562500.00018@-2487500.00035,-1887500.00033@-2212500.00023@-1787500.00033@-2312500.00023,-1537499.99963@-2412499.99964@-1437499.99963@-2512499.99964,-1562499.9997@-2387499.99958@-1462499.9997@-2487499.99958,-1762499.99981@-1962499.99999@-1662499.99981@-2062499.99999,-2612499.99966@-2362499.99972@-2512499.99966@-2462499.99972,-1687500.0001@-2037500.00036@-1587500.0001@-2137500.00036,-1862500.00054@-2662500.00033@-1762500.00054@-2762500.00033,-1987500.00022@-2887500.0003@-1887500.00022@-2987500.0003,-1687500.00042@-2112500.00032@-1587500.00042@-2212500.00032,-1587500.00033@-2337500.00021@-1487500.00033@-2437500.00021,-1687500.00019@-2062499.99987@-1587500.00019@-2162499.99987,-2187500.00034@-3012499.99995@-2087500.00034@-3112499.99995,-1712499.99977@-2212500.00002@-1612499.99977@-2312500.00002,-1937500.00013@-2287500.00034@-1837500.00013@-2387500.00034,-1862499.99998@-2412499.99959@-1762499.99998@-2512499.99959,-2637499.99981@-2287499.9998@-2537499.99981@-2387499.9998,-1837499.99998@-1987499.99977@-1737499.99998@-2087499.99977
            centroid_x = 64.72889546,56.42190773,64.41835989,57.85300979,63.55458436,63.88590191,63.958479,65.95144752,58.31153968,65.85750453,60.52588128,58.31610451,65.3326966,64.21239146,65.68322733,56.4758475,64.49461436,62.76903867,62.30459184,58.58991723,65.35100649
            centroid_y = -86.35551049,-77.99979033,-86.40123188,-91.98470311,-84.08193965,-76.13453331,-76.82013191,-85.39551284,-91.72698775,-83.11174172,-78.75095569,-78.40782459,-82.13393163,-77.78068708,-82.78097918,-79.91346832,-81.30869246,-83.92041104,-81.35457747,-92.905921,-86.26049664
            minfloearea = 300
            maxfloearea = 90000
            project_dir = "~/ice-floe-tracker-pipeline"

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            reflectance_dir = $fetchdata_dir/"reflectance"

    [[global_setup]]
        script = """
            mkdir -p ~/.cylc
            mkdir -p ~/.cylc/flow
            cp $project_dir/config/cylc_hpc/global.cylc ~/.cylc/flow
        """

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """

    [[pullfetchimage]]
        # Pull the latest Docker image containing software for fetching images from NASA Worldview API and satellite times from space-track.org
        # Apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/fetchdata.simg docker://brownccv/icefloetracker-fetchdata:main
        """
        platform = oscar
        execution time limit = PT1H
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 2

    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch reflectance, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )

            apptainer exec --bind $fetchdata_dir/${location_array[$i]}:/tmp $project_dir/fetchdata.simg /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_x_array=( $(echo $centroid_x| sed -e 's/,/ /g') )
            centroid_y_array=( $(echo $centroid_y | sed -e 's/,/ /g') )

            apptainer exec --bind $results_dir/${location_array[$i]}/soit:/tmp $project_dir/fetchdata.simg python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_lat ${centroid_x_array[$i]} --centroid_lon ${centroid_y_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[pulljuliaimage]]
        # Pull the latest Docker image containing Julia IceFloeTracker software
        # apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/icefloetracker-julia.simg docker://brownccv/icefloetracker-julia:main
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 32G
            --cpus-per-task = 2

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/landmasks:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 4G
            --cpus-per-task = 8

    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/reflectance -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 12G
            --cpus-per-task = 20

    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $preprocess_dir:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2

    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/"tracker":/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --passtimes $preprocess_dir --latlon $sample_img --output /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 20G
            --cpus-per-task = 1

    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $sample_img --resdir /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
