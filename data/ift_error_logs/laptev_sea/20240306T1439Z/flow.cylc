# cycl template mytemplate.j2
[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..20
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = global_setup  => mkpaths<param_set> => pullfetchimage & pulljuliaimage => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>
        
[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = laptev_sea-100km_by_100km-20040602-20040603,laptev_sea-100km_by_100km-20040923-20040924,laptev_sea-100km_by_100km-20060806-20060807,laptev_sea-100km_by_100km-20070405-20070406,laptev_sea-100km_by_100km-20070504-20070505,laptev_sea-100km_by_100km-20070712-20070713,laptev_sea-100km_by_100km-20080330-20080331,laptev_sea-100km_by_100km-20080508-20080509,laptev_sea-100km_by_100km-20080601-20080602,laptev_sea-100km_by_100km-20080720-20080721,laptev_sea-100km_by_100km-20110324-20110325,laptev_sea-100km_by_100km-20110514-20110515,laptev_sea-100km_by_100km-20130904-20130905,laptev_sea-100km_by_100km-20140301-20140302,laptev_sea-100km_by_100km-20140403-20140404,laptev_sea-100km_by_100km-20160402-20160403,laptev_sea-100km_by_100km-20160904-20160905,laptev_sea-100km_by_100km-20180601-20180602,laptev_sea-100km_by_100km-20180720-20180721,laptev_sea-100km_by_100km-20190816-20190817,laptev_sea-100km_by_100km-20210807-20210808
            startdate = 2004-06-02,2004-09-23,2006-08-06,2007-04-05,2007-05-04,2007-07-12,2008-03-30,2008-05-08,2008-06-01,2008-07-20,2011-03-24,2011-05-14,2013-09-04,2014-03-01,2014-04-03,2016-04-02,2016-09-04,2018-06-01,2018-07-20,2019-08-16,2021-08-07
            enddate = 2004-06-03,2004-09-24,2006-08-07,2007-04-06,2007-05-05,2007-07-13,2008-03-31,2008-05-09,2008-06-02,2008-07-21,2011-03-25,2011-05-15,2013-09-05,2014-03-02,2014-04-04,2016-04-03,2016-09-05,2018-06-02,2018-07-21,2019-08-17,2021-08-08
            crs = epsg3413 # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            
            bounding_box = 62500.00001@1662499.99953@162500.00001@1562499.99953,737500.00018@1662499.99976@837500.00018@1562499.99976,-37499.99985@1362499.99954@62500.00015@1262499.99954,187499.99959@1737499.99982@287499.99959@1637499.99982,-112499.99947@1487500.00046@-12499.99947@1387500.00046,-212500.00106@1337500.00031@-112500.00106@1237500.00031,562499.99996@1237499.9996@662499.99996@1137499.9996,712500.00065@1162500.00018@812500.00065@1062500.00018,437499.99919@1462500.00074@537499.99919@1362500.00074,112499.99998@1612499.99971@212499.99998@1512499.99971,612500.0@1162500.00006@712500.0@1062500.00006,712499.99934@1187499.99997@812499.99934@1087499.99997,712500.00065@1162500.00018@812500.00065@1062500.00018,512500.00014@1187500.00003@612500.00014@1087500.00003,162500.00141@1737499.99952@262500.00141@1637499.99952,537499.99953@1087500.00063@637499.99953@987500.00063,-87499.9992@1162499.99987@12500.0008@1062499.99987,-387500.00014@1512499.99965@-287500.00014@1412499.99965,-312499.99897@1787499.99978@-212499.99897@1687499.99978,262499.99972@1187499.99989@362499.99972@1087499.99989,-162499.99979@1137500.00055@-62499.99979@1037500.00055
            centroid_x = 75.15856633,73.54374897,77.92646286,74.3625584,76.77416431,78.06206368,77.71099328,77.59624115,76.26949993,75.57197452,78.08849234,77.40738053,77.59624115,78.32461575,74.39251731,79.02592398,79.75068046,76.20870909,73.88148748,79.1416659,79.93234417
            centroid_y = 131.0090869,108.9704078,134.4543424,126.9887684,137.4895529,142.1934701,107.7157927,100.5735234,115.9587693,129.0625839,104.2259639,101.1648802,100.5735234,108.6873515,127.8227541,105.4786382,136.9305874,147.9946168,143.5912254,119.6383837,140.9061411
            minfloearea = 300
            maxfloearea = 90000
            project_dir = "~/ice-floe-tracker-pipeline"

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            reflectance_dir = $fetchdata_dir/"reflectance"
            
    [[global_setup]]  
        script = """
            mkdir -p ~/.cylc
            mkdir -p ~/.cylc/flow
            cp $project_dir/config/cylc_hpc/global.cylc ~/.cylc/flow
        """

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """

    [[pullfetchimage]]
        # Pull the latest Docker image containing software for fetching images from NASA Worldview API and satellite times from space-track.org
        # Apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/fetchdata.simg docker://brownccv/icefloetracker-fetchdata:main
        """
        platform = oscar
        execution time limit = PT1H
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 2

    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch reflectance, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )

            apptainer exec --bind $fetchdata_dir/${location_array[$i]}:/tmp $project_dir/fetchdata.simg /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_x_array=( $(echo $centroid_x| sed -e 's/,/ /g') )
            centroid_y_array=( $(echo $centroid_y | sed -e 's/,/ /g') )

            apptainer exec --bind $results_dir/${location_array[$i]}/soit:/tmp $project_dir/fetchdata.simg python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_lat ${centroid_x_array[$i]} --centroid_lon ${centroid_y_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4
    
    [[pulljuliaimage]]
        # Pull the latest Docker image containing Julia IceFloeTracker software
        # apptainer will check the image layers and only re-download if necessary 
        script = """
            apptainer pull --force $project_dir/icefloetracker-julia.simg docker://brownccv/icefloetracker-julia:main
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 32G
            --cpus-per-task = 2

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/landmasks:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 4G
            --cpus-per-task = 8
    
    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/reflectance -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 12G
            --cpus-per-task = 20
    
    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $preprocess_dir:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
    
    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/"tracker":/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --passtimes $preprocess_dir --latlon $sample_img --output /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 20G
            --cpus-per-task = 1
    
    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $sample_img --resdir /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2