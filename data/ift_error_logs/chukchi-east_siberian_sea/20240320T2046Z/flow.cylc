# cycl template mytemplate.j2
[scheduler]
    allow implicit tasks = True
[task parameters]
    # Update this variable to match the range of parameter sets
    param_set = 0..20
[scheduling]
    initial cycle point = PT1M #creates a datetime one minute from system time in UTC
    [[graph]]
        R1 = global_setup  => mkpaths<param_set> => pullfetchimage & pulljuliaimage => fetchdata<param_set> & soit<param_set> => landmask<param_set> => preprocess<param_set> => extractfeatures<param_set> => tracking<param_set> & exportH5<param_set>
        
[runtime]
    [[root]]
        [[[environment]]]
            # Update these variables with your run parameters
            location = chukchi-east_siberian_sea-100km_by_100km-20040717-20040718,chukchi-east_siberian_sea-100km_by_100km-20050730-20050731,chukchi-east_siberian_sea-100km_by_100km-20060611-20060612,chukchi-east_siberian_sea-100km_by_100km-20060927-20060928,chukchi-east_siberian_sea-100km_by_100km-20070723-20070724,chukchi-east_siberian_sea-100km_by_100km-20090903-20090904,chukchi-east_siberian_sea-100km_by_100km-20100929-20100930,chukchi-east_siberian_sea-100km_by_100km-20140427-20140428,chukchi-east_siberian_sea-100km_by_100km-20140511-20140512,chukchi-east_siberian_sea-100km_by_100km-20140808-20140809,chukchi-east_siberian_sea-100km_by_100km-20150630-20150701,chukchi-east_siberian_sea-100km_by_100km-20160525-20160526,chukchi-east_siberian_sea-100km_by_100km-20170328-20170329,chukchi-east_siberian_sea-100km_by_100km-20170417-20170418,chukchi-east_siberian_sea-100km_by_100km-20180809-20180810,chukchi-east_siberian_sea-100km_by_100km-20180828-20180829,chukchi-east_siberian_sea-100km_by_100km-20190419-20190420,chukchi-east_siberian_sea-100km_by_100km-20190615-20190616,chukchi-east_siberian_sea-100km_by_100km-20200303-20200304,chukchi-east_siberian_sea-100km_by_100km-20200330-20200331,chukchi-east_siberian_sea-100km_by_100km-20220520-20220521
            startdate = 2004-07-17,2005-07-30,2006-06-11,2006-09-27,2007-07-23,2009-09-03,2010-09-29,2014-04-27,2014-05-11,2014-08-08,2015-06-30,2016-05-25,2017-03-28,2017-04-17,2018-08-09,2018-08-28,2019-04-19,2019-06-15,2020-03-03,2020-03-30,2022-05-20
            enddate = 2004-07-18,2005-07-31,2006-06-12,2006-09-28,2007-07-24,2009-09-04,2010-09-30,2014-04-28,2014-05-12,2014-08-09,2015-07-01,2016-05-26,2017-03-29,2017-04-18,2018-08-10,2018-08-29,2019-04-20,2019-06-16,2020-03-04,2020-03-31,2022-05-21
            crs = epsg3413 # epsg3413 for polar stereographic: left_x@top_y@right_x@lower_y
                             # wgs84 for lat/lon: top_left_lat@top_left_lon@lower_right_lat@lower_right_lon            
            bounding_box = -1312499.99878@1937500.00036@-1212499.99878@1837500.00036,-1187500.00017@1237500.00006@-1087500.00017@1137500.00006,-612499.99868@1637500.00011@-512499.99868@1537500.00011,-1412499.99956@1137500.00068@-1312499.99956@1037500.00068,-662499.99982@1437499.99958@-562499.99982@1337499.99958,-987499.9993@912500.00027@-887499.9993@812500.00027,-962500.00046@1312499.99954@-862500.00046@1212499.99954,-512500.00055@1537499.99972@-412500.00055@1437499.99972,-362500.00133@1537500.00006@-262500.00133@1437500.00006,-1512500.00074@1162499.9989@-1412500.00074@1062499.9989,-487500.00103@1612499.99917@-387500.00103@1512499.99917,-412499.99885@1587500.0007@-312499.99885@1487500.0007,-612500.00123@1762499.99928@-512500.00123@1662499.99928,-1412499.99856@1712500.00072@-1312499.99856@1612500.00072,-1087500.00005@1237500.00066@-987500.00005@1137500.00066,-1137500.00098@912499.99939@-1037500.00098@812499.99939,-362499.99969@1562500.00019@-262499.99969@1462500.00019,-562500.00051@1462500.00001@-462500.00051@1362500.00001,-487500.00091@1812499.99977@-387500.00091@1712499.99977,-1237500.00052@1812499.99917@-1137500.00052@1712499.99917,-487499.99934@1562500.00074@-387499.99934@1462500.00074
            centroid_lat = 69.25793095,74.9044512,74.54322463,74.00763823,76.06543315,78.27969014,75.69185602,75.69185602,76.03546416,73.15462424,75.10248263,75.49262615,73.47142475,70.34470456,75.51782426,77.23781494,75.81279153,76.19355475,73.34954439,70.56254647,75.53945903
            centroid_lon = 168.7775419,178.7680226,154.5107994,-173.5956473,158.8186505,-177.614056,170.8583598,152.2717426,146.8643905,-172.2596588,150.6422465,148.2664808,153.1836532,174.3362937,176.143199,-173.4180553,146.6737103,154.9423846,148.9405912,168.9704688,151.1328405
            minfloearea = 100
            maxfloearea = 90000
            project_dir = "~/ice-floe-tracker-pipeline"

            # Recommend using these default paths for output
            t = ${CYLC_WORKFLOW_INITIAL_CYCLE_POINT}
            julia_exec = "/usr/local/julia/bin/julia"
            report_dir = $project_dir/"workflow/report"
            results_dir = $project_dir/"results"/$t
            fetchdata_dir = $project_dir/"resources"/$t
            truecolor_dir = $fetchdata_dir/"truecolor"
            falsecolor_dir = $fetchdata_dir/"falsecolor"
            
    [[global_setup]]  
        script = """
            mkdir -p ~/.cylc
            mkdir -p ~/.cylc/flow
            cp $project_dir/config/cylc_hpc/global.cylc ~/.cylc/flow
        """

    [[mkpaths<param_set>]]
        # Convert param location list to indexable bash array and make directories for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            res=$results_dir/${location_array[$i]}
            mkdir -p $fetchdata_dir/${location_array[$i]}
            mkdir -p $res/soit
            mkdir -p $res/landmasks
            mkdir -p $res/preprocess
            mkdir -p $res/tracker
            mkdir -p $res/preprocess/hdf5-files
        """

    [[pullfetchimage]]
        # Pull the latest Docker image containing software for fetching images from NASA Worldview API and satellite times from space-track.org
        # Apptainer will check the image layers and only re-download if necessary
        script = """
            apptainer pull --force $project_dir/fetchdata.simg docker://brownccv/icefloetracker-fetchdata:main
        """
        platform = oscar
        execution time limit = PT1H
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 2

    [[fetchdata<param_set>]]
        # Convert param lists to indexable bash arrays and fetch falsecolor, truecolor, and landmask for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            bbox_array=( $(echo $bounding_box | sed -e 's/,/ /g') )
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )

            apptainer exec --bind $fetchdata_dir/${location_array[$i]}:/tmp $project_dir/fetchdata.simg /usr/local/bin/fetchdata.sh -o /tmp -s ${startdate_array[$i]} -e ${enddate_array[$i]} -c $crs -b ${bbox_array[$i]}
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4

    [[soit<param_set>]]
        # Convert param lists to indexable bash arrays and fetch Aqua and Terra satellite times for each location
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            startdate_array=( $(echo $startdate | sed -e 's/,/ /g') )
            enddate_array=( $(echo $enddate | sed -e 's/,/ /g') )
            centroid_lat_array=( $(echo $centroid_lat| sed -e 's/,/ /g') )
            centroid_lon_array=( $(echo $centroid_lon | sed -e 's/,/ /g') )

            apptainer exec --bind $results_dir/${location_array[$i]}/soit:/tmp $project_dir/fetchdata.simg python3 /usr/local/bin/pass_time_cylc.py --startdate ${startdate_array[$i]} --enddate ${enddate_array[$i]} --csvoutpath /tmp --centroid_lat ${centroid_lat_array[$i]} --centroid_lon ${centroid_lon_array[$i]} --SPACEUSER $SPACEUSER --SPACEPSWD $SPACEPSWD
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 5*PT30S
        execution retry delays = 5*PT6S
        [[[directives]]]
            --mem = 12G
            --cpus-per-task = 4
    
    [[pulljuliaimage]]
        # Pull the latest Docker image containing Julia IceFloeTracker software
        # apptainer will check the image layers and only re-download if necessary 
        script = """
            apptainer pull --force $project_dir/icefloetracker-julia.simg docker://brownccv/icefloetracker-julia:main
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 32G
            --cpus-per-task = 2

    [[landmask<param_set>]]
        # Generate land masks in Julia from raw landmask file
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/landmasks:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl landmask $fetchdata_dir/${location_array[$i]} /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 4G
            --cpus-per-task = 8
    
    [[preprocess<param_set>]]
        # Preprocess the satellite imagery and convert to binary
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl preprocess -t $fetchdata_dir/${location_array[$i]}/truecolor -r $fetchdata_dir/${location_array[$i]}/falsecolor -l $results_dir/${location_array[$i]}/landmasks -p $results_dir/${location_array[$i]}/soit -o /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem-per-cpu = 12G
            --cpus-per-task = 20
    
    [[extractfeatures<param_set>]]
        # Identify floes and extract floe metrics from binary processed images
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $preprocess_dir:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl extractfeatures -i $preprocess_dir -o /tmp --minarea $minfloearea --maxarea $maxfloearea
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2
    
    [[tracking<param_set>]]
        # Pair and track identified floes across days
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            preprocess_dir=$results_dir/${location_array[$i]}/preprocess
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/"tracker":/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl track --imgs $preprocess_dir --props $preprocess_dir --passtimes $preprocess_dir --latlon $sample_img --output /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = PT6S
        [[[directives]]]
            --mem = 20G
            --cpus-per-task = 1
    
    [[exportH5<param_set>]]
        # Package intermediate and final outputs into HDF5 files
        script = """
            i=${CYLC_TASK_PARAM_param_set}
            location_array=( $(echo $location | sed -e 's/,/ /g') )
            sample_img=$fetchdata_dir/${location_array[$i]}/truecolor/$(ls $fetchdata_dir/${location_array[$i]}/truecolor | head -1)

            apptainer exec --env JULIA_DEPOT_PATH=$HOME/.julia:/opt/julia --bind $results_dir/${location_array[$i]}/preprocess:/tmp,$report_dir:/usr/local/report $project_dir/icefloetracker-julia.simg $julia_exec -t auto /usr/local/bin/ice-floe-tracker.jl makeh5files --pathtosampleimg $sample_img --resdir /tmp
        """
        platform = oscar
        execution time limit = PT1H
        submission retry delays = 2*PT30S
        execution retry delays = 2*PT6S
        [[[directives]]]
            --mem = 18G
            --cpus-per-task = 2